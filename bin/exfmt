#!/usr/bin/env ruby

# Wraps around Elixir 1.6 `mix format -` to preserve leading space, so I can run
# :!exfmt in Vim or Spacemacs to format highlighted Elixir code.

require 'tmpdir'

ENV['ASDF_ELIXIR_VERSION'] = '1.6.6'
ENV['MIX_QUIET'] = '1'

module Exfmt
  class << self
    def format(input, output_stream)
      format_asdf(input, 120, output_stream)
    end

    private

    def format_fork(input, line_length, output_stream)
      project = File.join(ENV['HOME'], 'projects', 'elixir')
      elixir = File.join(project, 'bin', 'elixir')
      mix = File.join(project, 'bin', 'mix')
      write_formatter_exs(input, line_length)
      IO.popen([elixir, mix, 'format', '-'], 'r+') do |pipe|
        pipe.print input
        pipe.close_write
        pipe.each_line do |line|
          output_stream.print line
        end
      end
    end

    def format_asdf(input, line_length, output_stream)
      leading = leading(input)
      indent = indent(input)
      trailing = trailing(input)

      output_stream.print leading
      in_temp_dir do
        write_formatter_exs(input, line_length)
        IO.popen(['mix', 'format', '-'], 'r+') do |pipe|
          pipe.print input
          pipe.close_write
          pipe.each_line do |line|
            output_stream.print indent if line.strip != ''
            output_stream.print line
          end
        end
      end
      output_stream.print trailing
    end

    def leading(input)
      m = input.match(/\A(\s*\n)*/m)
      m && m.captures.first || ''
    end

    def trailing(input)
      m = input.match(/^(\s*\n)*\Z/m)
      m && m.captures.first || ''
    end

    def indent(input)
      m = input.match(/([ \t]*)\S/)
      m && m.captures.first || ''
    end

    def effective_line_length(input, line_length)
      indent_length = indent(input).chars.size
      line_length.to_i - indent_length
    end

    def write_formatter_exs(input, line_length)
      File.open('.formatter.exs', 'w') { |f| f.puts "[line_length: #{effective_line_length(input, line_length)}]" }
    end

    def in_temp_dir(&block)
      Dir.mktmpdir { |dir| Dir.chdir(dir, &block) }
    end
  end
end

if ARGV.first == '--test'
  require 'minitest/autorun'
  require 'minitest/pride'
  require 'stringio'

  ARGV.shift

  class TestExfmt < Minitest::Test
    def test_complex_simple
      input = <<-ELIXIR
        {:ok, _} = @client.create_matches([%{student: student, ext_student: ext_student}], school, :student_matches, :something_really_long)
      ELIXIR
      expected = <<-ELIXIR
        {:ok, _} =
          @client.create_matches(
            [%{student: student, ext_student: ext_student}],
            school,
            :student_matches,
            :something_really_long
          )
      ELIXIR
      output_stream = StringIO.new
      Exfmt.format(input, output_stream)
      assert_equal expected, output_stream.string
    end

    def test_complex_example
      input = <<-ELIXIR

        with {:ok, school} <- @client.get_school(:ext, object[:school]),
            student_attributes <- map.put(student_attributes, :"school-id", school.id),
            {:ok, student} <- @client.create_student(student_attributes),
            {:ok, _} <- @client.create_matches([%{student: student, ext_student: ext_student}], school, :student_matches) do
          :ok
        end


      ELIXIR
      expected = <<-ELIXIR

        with {:ok, school} <- @client.get_school(:ext, object[:school]),
             student_attributes <- map.put(student_attributes, :"school-id", school.id),
             {:ok, student} <- @client.create_student(student_attributes),
             {:ok, _} <-
               @client.create_matches([%{student: student, ext_student: ext_student}], school, :student_matches) do
          :ok
        end


      ELIXIR

      output_stream = StringIO.new
      Exfmt.format(input, output_stream)
      assert_equal expected, output_stream.string
    end
  end

  exit 0
elsif ARGV.empty?
  Exfmt.format(ARGF.read, $stdout)
else
  exec('mix', 'format', *ARGV)
end
