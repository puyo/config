#!/usr/bin/env ruby
#
# neovim wrapper. Parses arguments and opens all sorts of random junk I paste
# into it. ;)

require 'shellwords'
require 'open3'

def system_v(*cmd)
  puts cmd.shelljoin if ENV['DEBUG']
  system(*cmd)
end

pipe = File.join(Dir.home, '.cache/nvim/server.pipe')
vim_server = ['nvim-qt', '--', '--listen', pipe]
vim_client = ['nvim-qt', '--', '--server', pipe]
line = nil

_stdout, status = Open3.capture2e('nvim', '-es', '--clean', '--server', pipe, '--remote-expr', '1+1')
running = status.success?

args =
  if ARGV.size == 1
    file, line = ARGV.first.split(':')
    [file]
  elsif ARGV.size > 1
    ARGV
  else
    ['.']
  end

def find(orig_path)
  path = orig_path
  loop do
    return File.expand_path(path) if File.exist?(path)

    parts = path.split(File::SEPARATOR)
    return orig_path if parts.size <= 2

    path = File.join(*parts[1, parts.size])
  end
  orig_path
end

args = args.map { |a| find(a) }

if running
  system_v(*vim_client, '--remote-silent', *args)
else
  system_v(*vim_server, *args)
end

# Jump to line if specified
system_v(*vim_client, '--remote-send', ":#{line}<CR>") if line

# Focus Neovim window
#
# X11
#
# system_v('wmctrl', '-a', 'Neovim')
#
# KDE Wayland kdotool (cargo install kdotool)
#
stdout, status = Open3.capture2('kdotool', 'search', 'neovim')
if status.success? && m = stdout.match(/^(\S+)$/)
  Open3.capture2e('kdotool', 'windowactivate', m.captures.first)
end
